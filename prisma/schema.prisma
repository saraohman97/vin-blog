generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts  Account[]
  wines     Wine[]
  brands    Brand[]
  flavors   Flavor[]
  grapes    Grape[]
  countries Country[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Wine {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  label       String
  brand       String
  description String
  color       String
  flavor      String
  country     String
  price       String
  grape       String
  review      String
  zoomImage   Boolean
  images      Image[]
  createdAt   DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Flavor {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Country {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Grape {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  label     String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Image {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  url    String
  wineId String @db.ObjectId
  wine   Wine   @relation(fields: [wineId], references: [id], onDelete: Cascade)

  @@index([wineId])
}
